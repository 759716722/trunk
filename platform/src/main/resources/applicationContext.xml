<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
		   http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
       ">

	<context:component-scan base-package="com.jwei" />

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties"/>
		<property name="fileEncoding" value="UTF-8"/>
	</bean>


	<!--允许批量处理配置,存在SQL注入风险 -->
	<bean id="myWallConfig" class="com.alibaba.druid.wall.WallConfig">
		<!--允许一次执行多条语句-->
		<property name="multiStatementAllow" value="true" />
	</bean>

	<!--重新定义过滤器允许多个批量处理配置 默认是wall-->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="config" ref="myWallConfig"/>
	</bean>


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.sys.driverClassName}" />
		<property name="url" value="${jdbc.sys.url}" />
		<property name="username" value="${jdbc.sys.username}" />
		<property name="password" value="${jdbc.sys.password}" />
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="15" />
		<property name="maxWait" value="6000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1"/>
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!--不建议在生产环境开启-->
		<!--<property name="removeAbandoned" value="true" />-->
		<!--<property name="removeAbandonedTimeout" value="1800" />-->
		<!--<property name="logAbandoned" value="true" />-->


		<property name="filters" value="mergeStat" />

		<property name="proxyFilters">
			<list>
				<ref bean="wall-filter"/>
			</list>
		</property>

	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<property name="configLocation" value="classpath:sqlmap-config.xml" />

	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>

		<property name="basePackage" value="com.jwei.sys.dao,com.jwei.rad.dao,com.jwei.hr.dao"/>

	</bean>

	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>

			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="do*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<!--如有新命名不能涵盖的在此添加-->

			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceMethod"
			expression="execution(* com.jwei..*SVImpl.*(..))" /> <!--把事务控制在Service层 -->
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />

	</aop:config>



	<bean id="dataSourceK3" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.jwei.driverClassName}" />
		<property name="url" value="${jdbc.jwei.url}" />
		<property name="username" value="${jdbc.jwei.username}" />
		<property name="password" value="${jdbc.jwei.password}" />

		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="5" />
		<property name="maxWait" value="6000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1"/>
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!--不建议在生产环境开启-->
		<!--<property name="removeAbandoned" value="true" />-->
		<!--<property name="removeAbandonedTimeout" value="1800" />-->
		<!--<property name="logAbandoned" value="true" />-->

		<property name="filters" value="mergeStat,wall" />
	</bean>

	<bean id="sqlSessionFactoryK3" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceK3" />
		<property name="mapperLocations" value="classpath:sqlmap/K3Mapper.xml" />

	</bean>

	<bean id="K3Mapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.jwei.task.dao.K3Mapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactoryK3" />
	</bean>



	<bean id="dataSourceAT" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.aoting.driverClassName}" />
		<property name="url" value="${jdbc.aoting.url}" />
		<property name="username" value="${jdbc.aoting.username}" />
		<property name="password" value="${jdbc.aoting.password}" />

		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="5" />
		<property name="maxWait" value="60000" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1"/>
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!--不建议在生产环境开启-->
		<!--<property name="removeAbandoned" value="true" />-->
		<!--<property name="removeAbandonedTimeout" value="1800" />-->
		<!--<property name="logAbandoned" value="true" />-->

		<property name="filters" value="mergeStat,wall" />

	</bean>

	<bean id="sqlSessionFactoryAT" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceAT" />
		<property name="mapperLocations" value="classpath:sqlmap/ATMapper.xml" />
	</bean>

	<bean id="ATMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.jwei.task.dao.ATMapper" />
		<property name="sqlSessionFactory" ref="sqlSessionFactoryAT" />
	</bean>

    <bean name="transactionManagerAT"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceAT"/>
    </bean>

    <tx:advice id="txAdviceAT" transaction-manager="transactionManagerAT">
        <tx:attributes>

            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="create*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="do*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception" />
            <!--如有新命名不能涵盖的在此添加-->

            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="serviceMethodAT" expression="execution(* com.jwei.task..*AoTingImpl.*(..))" /> <!--把事务控制在后缀为AoTingImpl的类 -->
        <aop:advisor pointcut-ref="serviceMethodAT" advice-ref="txAdviceAT" />
    </aop:config>



	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"/>
		<property name="shared" value="true"/>
	</bean>

	<bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager"/>
	</bean>

	<bean id="shiroCacheManager"
		  class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<import resource="classpath:spring-shiro.xml"/>

	<import resource="classpath:spring-task.xml"/>
	<import resource="classpath:spring-mail.xml"/>

</beans>