<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd"
    >

    <description>Shiro安全配置</description>

    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--设置自定义Realm-->
        <property name="realm" ref="shiroRealm"/>
        <!--将缓存管理器，交给安全管理器-->
        <property name="cacheManager" ref="shiroCacheManager"/>
        <!-- 记住密码管理 -->
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id="shiroRealm" class="com.wyb.sys.shiro.MyRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!-- 启用身份验证缓存，即缓存AuthenticationInfo信息，默认false -->
        <property name="authenticationCachingEnabled" value="true"/>
        <!-- 指定AuthenticationInfo信息的缓存名称 -->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!-- 启用身份验证缓存，即缓存AuthorizationInfo信息，默认true -->
        <property name="authorizationCachingEnabled" value="true"/>
        <!-- 指定AuthorizationInfo信息的缓存名称 -->
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <!-- 记住密码Cookie -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <!-- 7天,采用spring el计算方便修改[细节决定成败]！ -->
        <property name="maxAge" value="#{7 * 24 * 60 * 60}"/>
    </bean>

    <!-- rememberMe管理器,cipherKey生成见{@code Base64Test.java} -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('5aaC5qKm5oqA5pyvAAAAAA==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>  
    </bean>

    <!-- Shiro Filter -->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
    <bean id="shiroFilter" class="com.wyb.sys.shiro.ShiroPermissionFactory">
        <!-- 安全管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 默认的登陆访问url -->
        <property name="loginUrl" value="/login.html"/>
        <!-- 登陆成功后跳转的url -->
        <property name="successUrl" value="/index.html"/>
        <!-- 没有权限跳转的url -->
        <property name="unauthorizedUrl" value="/unauth.html"/>
        <property name="filterChainDefinitions">
            <value>
                <!-- 
                    anon  不需要认证
                    authc 需要认证
                    user  验证通过或RememberMe登录的都可以
                -->
                /captcha.jpg = anon
                /static/** = anon
                /sys/user/login.do = anon
                /logout = logout
                /sys/admin/** = roles[admin]

            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="logout" value-ref="logoutFilter" />
            </map>
        </property>
    </bean>

    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login.html" />
    </bean>
    <!-- ajax session超时时处理 -->
   <!-- <bean id="ajaxSessionFilter" class="com.wangzhixuan.commons.shiro.ShiroAjaxSessionFilter"/>-->
    
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 设置全局会话超时时间 半小时  此操作会覆盖web.xml文件中的超时时间配置-->
        <property name="globalSessionTimeout" value="#{30 * 60 * 1000}"/>
        <!-- url上带sessionId 默认为true -->
        <property name="sessionIdUrlRewritingEnabled" value="false" />
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>

        <!--&lt;!&ndash;是否开启会话验证器，默认是开启的&ndash;&gt;
        <property name="sessionValidationSchedulerEnabled" value="true" />
        &lt;!&ndash;sessionValidationScheduler：设置会话验证调度器，
        默认就是使用ExecutorServiceSessionValidationScheduler。&ndash;&gt;
        <property name="sessionValidationScheduler" value="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler"/>
        &lt;!&ndash;设置调度时间间隔，单位毫秒，默认就是1小时&ndash;&gt;
        <property name="sessionValidationInterval" value="60000" />-->

        <property name="sessionDAO" ref="sessionDAO"/>

    </bean>

    <!--&lt;!&ndash; Shiro也提供了使用Quartz会话验证调度器,使用时需要导入shiro-quartz依赖&ndash;&gt;
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="60000" />
        <property name="sessionManager" ref="sessionManager" />
    </bean>-->
    
     <!--会话DAO 用于会话的CRUD-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!-- Session缓存名字，默认就是shiro-activeSessionCache -->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
    </bean>
    
    <!-- 在方法中 注入  securityManager ，进行代理控制 -->
    <!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>-->
    
    <!-- 密码错误5次锁定半小时 -->
    <bean id="credentialsMatcher" class="com.wyb.sys.shiro.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="shiroCacheManager"/>
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="4" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>


    <!--========================-如果使用注解方式验证将下面代码放开===============================-->
    <!--说明：
            使用spring注解 以下配置必须放在 spring-mvc的配置文件里，因为shiro的注解授权是利用Spring的AOP实现的。
            在程序启动时会自动扫描作了注解的Class，当发现注解时，就自动注入授权代码实现。
            也就是说，要注入授权控制代码，第一处必须要让框架要可以扫描找被注解的Class 。
            而我们的Srping项目在applicationContext.xml中一般是不扫描Controller的，所以也就无法让写在Controller中的注解授权生效了。
            因此正确的作法是将这配置放到spring-mvc的配置文件中.这样Controller就可以通过注解授权了。
            同样的道理，如果service层也需要注解授权，那就需要在spring的applicationContext.xml配置文件中再配置一遍。
    -->
<!--

    &lt;!&ndash; 保证实现了Shiro内部lifecycle函数的bean执行 Shiro注解依赖该Bean,必须在该bean之后运行&ndash;&gt;
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    &lt;!&ndash; AOP式方法级权限检查  &ndash;&gt;
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    &lt;!&ndash; 启用shrio 控制器授权注解拦截方式 &ndash;&gt;
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    &lt;!&ndash;说明：
            使用shiro注解授权后，上面配置的没有权限跳转的URL就失效了
    &ndash;&gt;
    &lt;!&ndash;解决方法：在 spring-mvc中加入如下配置：&ndash;&gt;
    &lt;!&ndash; shiro为集成springMvc 拦截异常&ndash;&gt;
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                &lt;!&ndash; 这里你可以根据需要定义N多个错误异常转发 &ndash;&gt;
                <prop key="org.apache.shiro.authz.UnauthorizedException">redirect:/unauth.html</prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">redirect:/unauth.html</prop>
                <prop key="java.lang.IllegalArgumentException">/error.jsp</prop>  &lt;!&ndash; 参数错误(bizError.jsp) &ndash;&gt;
                <prop key="java.lang.Exception">/error.jsp</prop>  &lt;!&ndash; 其他错误为'未定义错误'(unknowError.jsp) &ndash;&gt;
            </props>
        </property>
    </bean>

-->


</beans>